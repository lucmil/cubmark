{
    "docs": [
        {
            "location": "/",
            "text": "Description\n\n\nA benchmark tool for multi-variate integration software.\n\n\nAbstract from the paper\n\n\nA set of readily available procedures for multivariate integration are tested in\nthe context of calculations in the quantum phase space.\nPerformance and reliability is measured against a set of test functions\nincluding, but not limited to, the quantum probability mass of the\ndistribution.\nA new benchmarking application written in C++ is described, inspired by the\nTESTPACK algorithm by A.Genz.\n\n\nUsage\n\n\n$ ./cubmark -m dcuhre -m montecarlo -f G5:h=100,e=5.0 -c 1000000 -v testpack\n\n\n\nThis will run the DCUHRE and GSL Monte Carlo integration using Genz C0 test function with difficulty level h = 100 and exponent 5.0. Limit the number of calls to 1 million for each run. Compile the results into parameters defined by TESTPACK.\n\n\nExample output\n\n\nThe results can be displayed directly on a console in different post-processed\nformats or written to a file for later processing. There are three result\nviews available: testpack, gnuplot and view.\n\n\nTESTPACK view\n\n\n$ ./cubmark -m dcuhre -m montecarlo -f G5:h=100,e=5.0 -c 1000000 -v testpack\n\n\n\nTESTPACK\n format.\n\n\n# Test function: G5\n# Parameters: G5:h=100,e=5.0\n# Boundary is infinite: 0\n# RET EE RE ROB Calls Time Q Fail\n# Method: dcuhre\n5.0e-02 { 2.03e-02 3.71e-02 } { 4.23e-04 1.06e-03 } 100% { 1.95e+02 1.95e+02 } { 0.00e+00 0.00e+00 } 1.8 0%\n5.0e-03 { 4.16e-03 4.27e-03 } { 1.76e-04 2.17e-04 } 100% { 9.75e+02 1.24e+03 } { 0.00e+00 0.00e+00 } 2.2 0%\n(...)\n\n# Method: montecarlo\n5.0e-02 { 6.07e-03 7.10e-03 } { 2.18e-03 2.67e-03 } 100% { 5.00e+03 5.00e+03 } { 0.00e+00 0.00e+00 } 1.3 0%\n5.0e-03 { 6.16e-03 6.99e-03 } { 2.47e-05 4.41e-05 } 0% { 1.00e+07 1.00e+07 } { 5.50e+02 5.50e+02 } 1.0 0%\n(...)\n\n\n\n\n\n\nRET - given relative error tolerance\n\n\nEE - error estimate reported by the library (tertiles)\n\n\nRE - real error (tertiles)\n\n\nROB - success/failure reporting reliability (average)\n\n\nCALLS - number of function evaluations (tertiles)\n\n\nTIME - cpu time used in milliseconds (tertiles)\n\n\nQ - result quality, as defined by A. Genz\n\n\nFAIL - failed results reported as sucessful\n\n\n\n\nRaw dump\n\n\nA raw dump of the results allows to calculate the above statistics at a later time or in a different application\n\n\n$ ./cubmark -m dcuhre -m montecarlo -f G5:h=100,e=5.0 -c 1000000 -v raw -o run_G5.dat\n$ ./cubmark -i run_G5.dat -v testpack\n\n\n\nTest functions\n\n\nThe following test functions are available:\n\n\nG family\n\n\nDefined by \nA.Genz\n\n\n$ ./cubmark -m r2d2lri -f G1:h=100,e=5.0 -v testpack\n\n\n\n\n\ncb::G1\n - Oscillatory\n\n\ncb::G2\n - Product Peak\n\n\ncb::G3\n - Corner Peak\n\n\ncb::G4\n - Gaussian\n\n\ncb::G5\n - \"C0\"\n\n\ncb::G6\n - Discontinuous\n\n\n\n\nRD family\n\n\nDefined by\n\n\n$ ./cubmark -m r2d2lri -f RD28 -v testpack\n\n\n\n\n\ncb::RD28Builder::compute\n\n\ncb::RD29Builder::compute\n\n\ncb::RD31Builder::compute\n\n\ncb::RD35Builder::compute\n\n\n\n\nWigner distributions\n\n\n$ ./cubmark -m r2d2lri -f W3:h=5 -v testpack\n\n\n\n\n\ncb::W1\n - Wigner distribution of a constant wavefunction\n\n\ncb::W2\n - Wigner distribution of a triangle wavefunction\n\n\ncb::W3\n - Wigner distribution of an infinite-potential well\n\n\n\n\nBuilding\n\n\n$ cd benchmark\n$ cmake .\n$ make\n\n\n\nTo configure non-standard library paths you need to set CMake's include and library paths:\n\n\n$ cmake \\\n    -DCMAKE_INCLUDE_PATH=\"/path/to/Cubpack++/Code;/path/to/dcuhre;/path/to/r2d2lri;/path/to/HIntlib/include\" \\\n    -DCMAKE_LIBRARY_PATH=\"/path/to/Cubpack++/Code;/path/to/dcuhre;/path/to/r2d2lri;/path/to/HIntlib/lib\"\n\n\n\nFor each library this should yield:\n\n\n-- checking for module 'HIntLib'\n--   package 'HIntLib' not found\n-- Found HIntLib \nHIntLib libraries found. Integration method will be available.\n\n\n\n\nRequirements\n\n\n\n\ngcc 4.4.0+\n\n\ncmake 2.6+\n\n\nBoost 1.34+ (serialization, program-options)\n\n\n\n\nSupported libraries\n\n\n\n\nCubpack++ \nhttp://nines.cs.kuleuven.be/software/cubpack/\n\n\nr2d2lri \nhttp://dl.acm.org/citation.cfm?id=513006\n\n\nHIntLib \nhttp://mint.sbg.ac.at/HIntLib/\n\n\nDCUHRE \nhttp://dl.acm.org/citation.cfm?id=210234\n\n\nGSL \nhttps://www.gnu.org/software/gsl/\n\n\n\n\nDocumentation\n\n\n\n\nDoxygen documentation with full function equations",
            "title": "Home"
        },
        {
            "location": "/#description",
            "text": "A benchmark tool for multi-variate integration software.",
            "title": "Description"
        },
        {
            "location": "/#abstract-from-the-paper",
            "text": "A set of readily available procedures for multivariate integration are tested in\nthe context of calculations in the quantum phase space.\nPerformance and reliability is measured against a set of test functions\nincluding, but not limited to, the quantum probability mass of the\ndistribution.\nA new benchmarking application written in C++ is described, inspired by the\nTESTPACK algorithm by A.Genz.",
            "title": "Abstract from the paper"
        },
        {
            "location": "/#usage",
            "text": "$ ./cubmark -m dcuhre -m montecarlo -f G5:h=100,e=5.0 -c 1000000 -v testpack  This will run the DCUHRE and GSL Monte Carlo integration using Genz C0 test function with difficulty level h = 100 and exponent 5.0. Limit the number of calls to 1 million for each run. Compile the results into parameters defined by TESTPACK.",
            "title": "Usage"
        },
        {
            "location": "/#example-output",
            "text": "The results can be displayed directly on a console in different post-processed\nformats or written to a file for later processing. There are three result\nviews available: testpack, gnuplot and view.  TESTPACK view  $ ./cubmark -m dcuhre -m montecarlo -f G5:h=100,e=5.0 -c 1000000 -v testpack  TESTPACK  format.  # Test function: G5\n# Parameters: G5:h=100,e=5.0\n# Boundary is infinite: 0\n# RET EE RE ROB Calls Time Q Fail\n# Method: dcuhre\n5.0e-02 { 2.03e-02 3.71e-02 } { 4.23e-04 1.06e-03 } 100% { 1.95e+02 1.95e+02 } { 0.00e+00 0.00e+00 } 1.8 0%\n5.0e-03 { 4.16e-03 4.27e-03 } { 1.76e-04 2.17e-04 } 100% { 9.75e+02 1.24e+03 } { 0.00e+00 0.00e+00 } 2.2 0%\n(...)\n\n# Method: montecarlo\n5.0e-02 { 6.07e-03 7.10e-03 } { 2.18e-03 2.67e-03 } 100% { 5.00e+03 5.00e+03 } { 0.00e+00 0.00e+00 } 1.3 0%\n5.0e-03 { 6.16e-03 6.99e-03 } { 2.47e-05 4.41e-05 } 0% { 1.00e+07 1.00e+07 } { 5.50e+02 5.50e+02 } 1.0 0%\n(...)   RET - given relative error tolerance  EE - error estimate reported by the library (tertiles)  RE - real error (tertiles)  ROB - success/failure reporting reliability (average)  CALLS - number of function evaluations (tertiles)  TIME - cpu time used in milliseconds (tertiles)  Q - result quality, as defined by A. Genz  FAIL - failed results reported as sucessful   Raw dump  A raw dump of the results allows to calculate the above statistics at a later time or in a different application  $ ./cubmark -m dcuhre -m montecarlo -f G5:h=100,e=5.0 -c 1000000 -v raw -o run_G5.dat\n$ ./cubmark -i run_G5.dat -v testpack",
            "title": "Example output"
        },
        {
            "location": "/#test-functions",
            "text": "The following test functions are available:  G family  Defined by  A.Genz  $ ./cubmark -m r2d2lri -f G1:h=100,e=5.0 -v testpack   cb::G1  - Oscillatory  cb::G2  - Product Peak  cb::G3  - Corner Peak  cb::G4  - Gaussian  cb::G5  - \"C0\"  cb::G6  - Discontinuous   RD family  Defined by  $ ./cubmark -m r2d2lri -f RD28 -v testpack   cb::RD28Builder::compute  cb::RD29Builder::compute  cb::RD31Builder::compute  cb::RD35Builder::compute   Wigner distributions  $ ./cubmark -m r2d2lri -f W3:h=5 -v testpack   cb::W1  - Wigner distribution of a constant wavefunction  cb::W2  - Wigner distribution of a triangle wavefunction  cb::W3  - Wigner distribution of an infinite-potential well",
            "title": "Test functions"
        },
        {
            "location": "/#building",
            "text": "$ cd benchmark\n$ cmake .\n$ make  To configure non-standard library paths you need to set CMake's include and library paths:  $ cmake \\\n    -DCMAKE_INCLUDE_PATH=\"/path/to/Cubpack++/Code;/path/to/dcuhre;/path/to/r2d2lri;/path/to/HIntlib/include\" \\\n    -DCMAKE_LIBRARY_PATH=\"/path/to/Cubpack++/Code;/path/to/dcuhre;/path/to/r2d2lri;/path/to/HIntlib/lib\"  For each library this should yield:  -- checking for module 'HIntLib'\n--   package 'HIntLib' not found\n-- Found HIntLib \nHIntLib libraries found. Integration method will be available.",
            "title": "Building"
        },
        {
            "location": "/#requirements",
            "text": "gcc 4.4.0+  cmake 2.6+  Boost 1.34+ (serialization, program-options)",
            "title": "Requirements"
        },
        {
            "location": "/#supported-libraries",
            "text": "Cubpack++  http://nines.cs.kuleuven.be/software/cubpack/  r2d2lri  http://dl.acm.org/citation.cfm?id=513006  HIntLib  http://mint.sbg.ac.at/HIntLib/  DCUHRE  http://dl.acm.org/citation.cfm?id=210234  GSL  https://www.gnu.org/software/gsl/",
            "title": "Supported libraries"
        },
        {
            "location": "/#documentation",
            "text": "Doxygen documentation with full function equations",
            "title": "Documentation"
        }
    ]
}